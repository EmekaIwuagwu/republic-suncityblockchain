// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rsuncitychain/individualregistration/v1/individualrecord.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Individualrecord struct {
	Index           string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	PersonalRegnum  string `protobuf:"bytes,2,opt,name=personalRegnum,proto3" json:"personalRegnum,omitempty"`
	OwnerAddress    string `protobuf:"bytes,3,opt,name=ownerAddress,proto3" json:"ownerAddress,omitempty"`
	LocationAddress string `protobuf:"bytes,4,opt,name=locationAddress,proto3" json:"locationAddress,omitempty"`
	DateOfBirth     string `protobuf:"bytes,5,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	Gender          string `protobuf:"bytes,6,opt,name=gender,proto3" json:"gender,omitempty"`
	Email           string `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	Tx              string `protobuf:"bytes,8,opt,name=tx,proto3" json:"tx,omitempty"`
	Telephone       string `protobuf:"bytes,9,opt,name=telephone,proto3" json:"telephone,omitempty"`
	CreatedAt       string `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Creator         string `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Individualrecord) Reset()         { *m = Individualrecord{} }
func (m *Individualrecord) String() string { return proto.CompactTextString(m) }
func (*Individualrecord) ProtoMessage()    {}
func (*Individualrecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_288db35530e5c6b7, []int{0}
}
func (m *Individualrecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Individualrecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Individualrecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Individualrecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Individualrecord.Merge(m, src)
}
func (m *Individualrecord) XXX_Size() int {
	return m.Size()
}
func (m *Individualrecord) XXX_DiscardUnknown() {
	xxx_messageInfo_Individualrecord.DiscardUnknown(m)
}

var xxx_messageInfo_Individualrecord proto.InternalMessageInfo

func (m *Individualrecord) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Individualrecord) GetPersonalRegnum() string {
	if m != nil {
		return m.PersonalRegnum
	}
	return ""
}

func (m *Individualrecord) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *Individualrecord) GetLocationAddress() string {
	if m != nil {
		return m.LocationAddress
	}
	return ""
}

func (m *Individualrecord) GetDateOfBirth() string {
	if m != nil {
		return m.DateOfBirth
	}
	return ""
}

func (m *Individualrecord) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *Individualrecord) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Individualrecord) GetTx() string {
	if m != nil {
		return m.Tx
	}
	return ""
}

func (m *Individualrecord) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *Individualrecord) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Individualrecord) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Individualrecord)(nil), "rsuncitychain.individualregistration.v1.Individualrecord")
}

func init() {
	proto.RegisterFile("rsuncitychain/individualregistration/v1/individualrecord.proto", fileDescriptor_288db35530e5c6b7)
}

var fileDescriptor_288db35530e5c6b7 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x31, 0x4f, 0x32, 0x41,
	0x10, 0x86, 0xb9, 0xfb, 0x3e, 0x40, 0x16, 0x83, 0x66, 0x63, 0xcc, 0x16, 0xe6, 0x42, 0x28, 0x94,
	0xc2, 0x40, 0x88, 0xbd, 0x09, 0x14, 0x26, 0x56, 0x26, 0x94, 0x76, 0xeb, 0xed, 0x08, 0x9b, 0x1c,
	0xbb, 0x97, 0xb9, 0x01, 0x8f, 0x7f, 0xe1, 0xcf, 0xb2, 0xa4, 0xb0, 0xb0, 0x34, 0xf0, 0x47, 0x0c,
	0x83, 0xa8, 0x77, 0xd1, 0xf2, 0x7d, 0x9e, 0x77, 0x36, 0x3b, 0x19, 0x71, 0x8d, 0xd9, 0xdc, 0xc5,
	0x96, 0x96, 0xf1, 0x54, 0x5b, 0xd7, 0xb7, 0xce, 0xd8, 0x85, 0x35, 0x73, 0x9d, 0x20, 0x4c, 0x6c,
	0x46, 0xa8, 0xc9, 0x7a, 0xd7, 0x5f, 0x0c, 0x0a, 0x26, 0xf6, 0x68, 0x7a, 0x29, 0x7a, 0xf2, 0xf2,
	0xa2, 0x30, 0xdf, 0xfb, 0x7d, 0xbe, 0xb7, 0x18, 0x74, 0x5e, 0x43, 0x71, 0x7c, 0x5b, 0x7a, 0x43,
	0x9e, 0x88, 0xaa, 0x75, 0x06, 0x72, 0x15, 0xb4, 0x83, 0x6e, 0x63, 0xbc, 0x0b, 0xf2, 0x5c, 0xb4,
	0x52, 0xc0, 0xcc, 0x3b, 0x9d, 0x8c, 0x61, 0xe2, 0xe6, 0x33, 0x15, 0xb2, 0x2e, 0x51, 0xd9, 0x11,
	0x87, 0xfe, 0xc9, 0x01, 0x0e, 0x8d, 0x41, 0xc8, 0x32, 0xf5, 0x8f, 0x5b, 0x05, 0x26, 0xbb, 0xe2,
	0x28, 0xf1, 0x31, 0xff, 0x62, 0x5f, 0xfb, 0xcf, 0xb5, 0x32, 0x96, 0x6d, 0xd1, 0x34, 0x9a, 0xe0,
	0xee, 0x71, 0x64, 0x91, 0xa6, 0xaa, 0xca, 0xad, 0x9f, 0x48, 0x9e, 0x8a, 0xda, 0x04, 0x9c, 0x01,
	0x54, 0x35, 0x96, 0x9f, 0x69, 0xbb, 0x05, 0xcc, 0xb4, 0x4d, 0x54, 0x7d, 0xb7, 0x05, 0x07, 0xd9,
	0x12, 0x21, 0xe5, 0xea, 0x80, 0x51, 0x48, 0xb9, 0x3c, 0x13, 0x0d, 0x82, 0x04, 0xd2, 0xa9, 0x77,
	0xa0, 0x1a, 0x8c, 0xbf, 0xc1, 0xd6, 0xc6, 0x08, 0x9a, 0xc0, 0x0c, 0x49, 0x89, 0x9d, 0xfd, 0x02,
	0x52, 0x89, 0x3a, 0x07, 0x8f, 0xaa, 0xc9, 0x6e, 0x1f, 0x47, 0x37, 0x2f, 0xeb, 0x28, 0x58, 0xad,
	0xa3, 0xe0, 0x7d, 0x1d, 0x05, 0xcf, 0x9b, 0xa8, 0xb2, 0xda, 0x44, 0x95, 0xb7, 0x4d, 0x54, 0xb9,
	0xbf, 0x2c, 0x5e, 0x36, 0xff, 0xeb, 0xb6, 0xb4, 0x4c, 0x21, 0x7b, 0xa8, 0xf1, 0x39, 0xaf, 0x3e,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xec, 0x3e, 0x92, 0x10, 0x02, 0x00, 0x00,
}

func (m *Individualrecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Individualrecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Individualrecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintIndividualrecord(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintIndividualrecord(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Telephone) > 0 {
		i -= len(m.Telephone)
		copy(dAtA[i:], m.Telephone)
		i = encodeVarintIndividualrecord(dAtA, i, uint64(len(m.Telephone)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintIndividualrecord(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintIndividualrecord(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintIndividualrecord(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DateOfBirth) > 0 {
		i -= len(m.DateOfBirth)
		copy(dAtA[i:], m.DateOfBirth)
		i = encodeVarintIndividualrecord(dAtA, i, uint64(len(m.DateOfBirth)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LocationAddress) > 0 {
		i -= len(m.LocationAddress)
		copy(dAtA[i:], m.LocationAddress)
		i = encodeVarintIndividualrecord(dAtA, i, uint64(len(m.LocationAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintIndividualrecord(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PersonalRegnum) > 0 {
		i -= len(m.PersonalRegnum)
		copy(dAtA[i:], m.PersonalRegnum)
		i = encodeVarintIndividualrecord(dAtA, i, uint64(len(m.PersonalRegnum)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintIndividualrecord(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIndividualrecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovIndividualrecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Individualrecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovIndividualrecord(uint64(l))
	}
	l = len(m.PersonalRegnum)
	if l > 0 {
		n += 1 + l + sovIndividualrecord(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovIndividualrecord(uint64(l))
	}
	l = len(m.LocationAddress)
	if l > 0 {
		n += 1 + l + sovIndividualrecord(uint64(l))
	}
	l = len(m.DateOfBirth)
	if l > 0 {
		n += 1 + l + sovIndividualrecord(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovIndividualrecord(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovIndividualrecord(uint64(l))
	}
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovIndividualrecord(uint64(l))
	}
	l = len(m.Telephone)
	if l > 0 {
		n += 1 + l + sovIndividualrecord(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovIndividualrecord(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovIndividualrecord(uint64(l))
	}
	return n
}

func sovIndividualrecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIndividualrecord(x uint64) (n int) {
	return sovIndividualrecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Individualrecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndividualrecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Individualrecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Individualrecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndividualrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonalRegnum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndividualrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PersonalRegnum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndividualrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndividualrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateOfBirth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndividualrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateOfBirth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndividualrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndividualrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndividualrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Telephone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndividualrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Telephone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndividualrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndividualrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndividualrecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndividualrecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndividualrecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndividualrecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndividualrecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndividualrecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIndividualrecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIndividualrecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIndividualrecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIndividualrecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndividualrecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIndividualrecord = fmt.Errorf("proto: unexpected end of group")
)
