// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rsuncitychain/taxpayments/v1/taxpayment.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Taxpayment struct {
	Index              string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	ReceiptNumber      string `protobuf:"bytes,2,opt,name=receiptNumber,proto3" json:"receiptNumber,omitempty"`
	PaymentFromAddress string `protobuf:"bytes,3,opt,name=paymentFromAddress,proto3" json:"paymentFromAddress,omitempty"`
	PaymenttoAddress   string `protobuf:"bytes,4,opt,name=paymenttoAddress,proto3" json:"paymenttoAddress,omitempty"`
	Amount             string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	DateOfPayment      string `protobuf:"bytes,6,opt,name=dateOfPayment,proto3" json:"dateOfPayment,omitempty"`
	Tx                 string `protobuf:"bytes,7,opt,name=tx,proto3" json:"tx,omitempty"`
	CreatedAt          string `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Creator            string `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Taxpayment) Reset()         { *m = Taxpayment{} }
func (m *Taxpayment) String() string { return proto.CompactTextString(m) }
func (*Taxpayment) ProtoMessage()    {}
func (*Taxpayment) Descriptor() ([]byte, []int) {
	return fileDescriptor_041c7c1f758a7ab0, []int{0}
}
func (m *Taxpayment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Taxpayment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Taxpayment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Taxpayment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Taxpayment.Merge(m, src)
}
func (m *Taxpayment) XXX_Size() int {
	return m.Size()
}
func (m *Taxpayment) XXX_DiscardUnknown() {
	xxx_messageInfo_Taxpayment.DiscardUnknown(m)
}

var xxx_messageInfo_Taxpayment proto.InternalMessageInfo

func (m *Taxpayment) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Taxpayment) GetReceiptNumber() string {
	if m != nil {
		return m.ReceiptNumber
	}
	return ""
}

func (m *Taxpayment) GetPaymentFromAddress() string {
	if m != nil {
		return m.PaymentFromAddress
	}
	return ""
}

func (m *Taxpayment) GetPaymenttoAddress() string {
	if m != nil {
		return m.PaymenttoAddress
	}
	return ""
}

func (m *Taxpayment) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Taxpayment) GetDateOfPayment() string {
	if m != nil {
		return m.DateOfPayment
	}
	return ""
}

func (m *Taxpayment) GetTx() string {
	if m != nil {
		return m.Tx
	}
	return ""
}

func (m *Taxpayment) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Taxpayment) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Taxpayment)(nil), "rsuncitychain.taxpayments.v1.Taxpayment")
}

func init() {
	proto.RegisterFile("rsuncitychain/taxpayments/v1/taxpayment.proto", fileDescriptor_041c7c1f758a7ab0)
}

var fileDescriptor_041c7c1f758a7ab0 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xb1, 0x4a, 0xc4, 0x40,
	0x10, 0x86, 0x93, 0xe8, 0xe5, 0xcc, 0x80, 0x22, 0x83, 0xc8, 0x16, 0xc7, 0xa2, 0x62, 0x21, 0x82,
	0x39, 0x0e, 0x4b, 0xab, 0xb3, 0xb0, 0x54, 0x11, 0x2b, 0xbb, 0xbd, 0x64, 0xc4, 0x14, 0xc9, 0x86,
	0xcd, 0xe4, 0x48, 0xde, 0xc2, 0xe7, 0xf0, 0x49, 0x2c, 0xaf, 0xb4, 0x94, 0xe4, 0x45, 0xc4, 0x4d,
	0x4e, 0x2f, 0x68, 0xf9, 0x7f, 0xff, 0xb7, 0xcb, 0xc0, 0x0f, 0x17, 0xa6, 0x28, 0xb3, 0x28, 0xe1,
	0x3a, 0x7a, 0x51, 0x49, 0x36, 0x65, 0x55, 0xe5, 0xaa, 0x4e, 0x29, 0xe3, 0x62, 0xba, 0x9c, 0x6d,
	0xc4, 0x30, 0x37, 0x9a, 0x35, 0x4e, 0x06, 0x7a, 0xb8, 0xa1, 0x87, 0xcb, 0xd9, 0xc9, 0x9b, 0x07,
	0xf0, 0xf8, 0x83, 0xf0, 0x00, 0x46, 0x49, 0x16, 0x53, 0x25, 0xdc, 0x23, 0xf7, 0x2c, 0x78, 0xe8,
	0x02, 0x9e, 0xc2, 0xae, 0xa1, 0x88, 0x92, 0x9c, 0x6f, 0xcb, 0x74, 0x41, 0x46, 0x78, 0xb6, 0x1d,
	0x42, 0x0c, 0x01, 0xfb, 0x6f, 0x6e, 0x8c, 0x4e, 0xe7, 0x71, 0x6c, 0xa8, 0x28, 0xc4, 0x96, 0x55,
	0xff, 0x69, 0xf0, 0x1c, 0xf6, 0x7b, 0xca, 0x7a, 0x6d, 0x6f, 0x5b, 0xfb, 0x0f, 0xc7, 0x43, 0xf0,
	0x55, 0xaa, 0xcb, 0x8c, 0xc5, 0xc8, 0x1a, 0x7d, 0xfa, 0xbe, 0x2c, 0x56, 0x4c, 0x77, 0xcf, 0xf7,
	0xdd, 0x0b, 0xe1, 0x77, 0x97, 0x0d, 0x20, 0xee, 0x81, 0xc7, 0x95, 0x18, 0xdb, 0xca, 0xe3, 0x0a,
	0x27, 0x10, 0x44, 0x86, 0x14, 0x53, 0x3c, 0x67, 0xb1, 0x63, 0xf1, 0x2f, 0x40, 0x01, 0x63, 0x1b,
	0xb4, 0x11, 0x81, 0xed, 0xd6, 0xf1, 0xfa, 0xea, 0xbd, 0x91, 0xee, 0xaa, 0x91, 0xee, 0x67, 0x23,
	0xdd, 0xd7, 0x56, 0x3a, 0xab, 0x56, 0x3a, 0x1f, 0xad, 0x74, 0x9e, 0x8e, 0x87, 0x9b, 0x54, 0x83,
	0x55, 0xb8, 0xce, 0xa9, 0x58, 0xf8, 0x76, 0x8e, 0xcb, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x31,
	0xc2, 0x0e, 0x3f, 0xbf, 0x01, 0x00, 0x00,
}

func (m *Taxpayment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Taxpayment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Taxpayment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTaxpayment(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintTaxpayment(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintTaxpayment(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DateOfPayment) > 0 {
		i -= len(m.DateOfPayment)
		copy(dAtA[i:], m.DateOfPayment)
		i = encodeVarintTaxpayment(dAtA, i, uint64(len(m.DateOfPayment)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTaxpayment(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PaymenttoAddress) > 0 {
		i -= len(m.PaymenttoAddress)
		copy(dAtA[i:], m.PaymenttoAddress)
		i = encodeVarintTaxpayment(dAtA, i, uint64(len(m.PaymenttoAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PaymentFromAddress) > 0 {
		i -= len(m.PaymentFromAddress)
		copy(dAtA[i:], m.PaymentFromAddress)
		i = encodeVarintTaxpayment(dAtA, i, uint64(len(m.PaymentFromAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ReceiptNumber) > 0 {
		i -= len(m.ReceiptNumber)
		copy(dAtA[i:], m.ReceiptNumber)
		i = encodeVarintTaxpayment(dAtA, i, uint64(len(m.ReceiptNumber)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTaxpayment(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTaxpayment(dAtA []byte, offset int, v uint64) int {
	offset -= sovTaxpayment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Taxpayment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTaxpayment(uint64(l))
	}
	l = len(m.ReceiptNumber)
	if l > 0 {
		n += 1 + l + sovTaxpayment(uint64(l))
	}
	l = len(m.PaymentFromAddress)
	if l > 0 {
		n += 1 + l + sovTaxpayment(uint64(l))
	}
	l = len(m.PaymenttoAddress)
	if l > 0 {
		n += 1 + l + sovTaxpayment(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTaxpayment(uint64(l))
	}
	l = len(m.DateOfPayment)
	if l > 0 {
		n += 1 + l + sovTaxpayment(uint64(l))
	}
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovTaxpayment(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovTaxpayment(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTaxpayment(uint64(l))
	}
	return n
}

func sovTaxpayment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTaxpayment(x uint64) (n int) {
	return sovTaxpayment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Taxpayment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaxpayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Taxpayment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Taxpayment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaxpayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaxpayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaxpayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaxpayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaxpayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaxpayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentFromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaxpayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaxpayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaxpayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentFromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymenttoAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaxpayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaxpayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaxpayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymenttoAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaxpayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaxpayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaxpayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateOfPayment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaxpayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaxpayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaxpayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateOfPayment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaxpayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaxpayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaxpayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaxpayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaxpayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaxpayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaxpayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaxpayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaxpayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaxpayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaxpayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTaxpayment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTaxpayment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTaxpayment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTaxpayment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTaxpayment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTaxpayment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTaxpayment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTaxpayment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTaxpayment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTaxpayment = fmt.Errorf("proto: unexpected end of group")
)
