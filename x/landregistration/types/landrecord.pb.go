// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rsuncitychain/landregistration/v1/landrecord.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Landrecord struct {
	Index               string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	LandRegNum          string `protobuf:"bytes,2,opt,name=landRegNum,proto3" json:"landRegNum,omitempty"`
	OwnerAddress        string `protobuf:"bytes,3,opt,name=ownerAddress,proto3" json:"ownerAddress,omitempty"`
	LandLocationAddress string `protobuf:"bytes,4,opt,name=landLocationAddress,proto3" json:"landLocationAddress,omitempty"`
	LandOwnerName       string `protobuf:"bytes,5,opt,name=landOwnerName,proto3" json:"landOwnerName,omitempty"`
	DateofLandPurchase  string `protobuf:"bytes,6,opt,name=dateofLandPurchase,proto3" json:"dateofLandPurchase,omitempty"`
	NameOfPreviousOwner string `protobuf:"bytes,7,opt,name=nameOfPreviousOwner,proto3" json:"nameOfPreviousOwner,omitempty"`
	LandOwnerTel        string `protobuf:"bytes,8,opt,name=landOwnerTel,proto3" json:"landOwnerTel,omitempty"`
	LandOwnerEmail      string `protobuf:"bytes,9,opt,name=landOwnerEmail,proto3" json:"landOwnerEmail,omitempty"`
	Tx                  string `protobuf:"bytes,10,opt,name=tx,proto3" json:"tx,omitempty"`
	CreatedAt           string `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Creator             string `protobuf:"bytes,12,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Landrecord) Reset()         { *m = Landrecord{} }
func (m *Landrecord) String() string { return proto.CompactTextString(m) }
func (*Landrecord) ProtoMessage()    {}
func (*Landrecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_124c99981d57ef41, []int{0}
}
func (m *Landrecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Landrecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Landrecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Landrecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Landrecord.Merge(m, src)
}
func (m *Landrecord) XXX_Size() int {
	return m.Size()
}
func (m *Landrecord) XXX_DiscardUnknown() {
	xxx_messageInfo_Landrecord.DiscardUnknown(m)
}

var xxx_messageInfo_Landrecord proto.InternalMessageInfo

func (m *Landrecord) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Landrecord) GetLandRegNum() string {
	if m != nil {
		return m.LandRegNum
	}
	return ""
}

func (m *Landrecord) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *Landrecord) GetLandLocationAddress() string {
	if m != nil {
		return m.LandLocationAddress
	}
	return ""
}

func (m *Landrecord) GetLandOwnerName() string {
	if m != nil {
		return m.LandOwnerName
	}
	return ""
}

func (m *Landrecord) GetDateofLandPurchase() string {
	if m != nil {
		return m.DateofLandPurchase
	}
	return ""
}

func (m *Landrecord) GetNameOfPreviousOwner() string {
	if m != nil {
		return m.NameOfPreviousOwner
	}
	return ""
}

func (m *Landrecord) GetLandOwnerTel() string {
	if m != nil {
		return m.LandOwnerTel
	}
	return ""
}

func (m *Landrecord) GetLandOwnerEmail() string {
	if m != nil {
		return m.LandOwnerEmail
	}
	return ""
}

func (m *Landrecord) GetTx() string {
	if m != nil {
		return m.Tx
	}
	return ""
}

func (m *Landrecord) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Landrecord) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Landrecord)(nil), "rsuncitychain.landregistration.v1.Landrecord")
}

func init() {
	proto.RegisterFile("rsuncitychain/landregistration/v1/landrecord.proto", fileDescriptor_124c99981d57ef41)
}

var fileDescriptor_124c99981d57ef41 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x41, 0x4e, 0x02, 0x31,
	0x14, 0x86, 0x19, 0x10, 0x90, 0x27, 0xb2, 0xa8, 0x2e, 0xba, 0x30, 0x13, 0x25, 0x86, 0xb8, 0x1a,
	0x44, 0x2f, 0x20, 0x26, 0xee, 0x08, 0x10, 0xe2, 0xca, 0x5d, 0x9d, 0x79, 0x40, 0x13, 0xa6, 0x25,
	0x6d, 0x07, 0x87, 0x5b, 0x78, 0x18, 0x0f, 0xe1, 0x92, 0xa5, 0x4b, 0x03, 0x17, 0x31, 0x2d, 0x82,
	0x0c, 0xb2, 0xfc, 0xbf, 0xff, 0xff, 0xdb, 0xf7, 0x92, 0x07, 0x77, 0x4a, 0x27, 0x22, 0xe4, 0x66,
	0x1e, 0x8e, 0x19, 0x17, 0xcd, 0x09, 0x13, 0x91, 0xc2, 0x11, 0xd7, 0x46, 0x31, 0xc3, 0xa5, 0x68,
	0xce, 0x5a, 0xbf, 0x2c, 0x94, 0x2a, 0x0a, 0xa6, 0x4a, 0x1a, 0x49, 0xae, 0x32, 0x9d, 0x60, 0xbf,
	0x13, 0xcc, 0x5a, 0xf5, 0x8f, 0x02, 0x40, 0x67, 0xdb, 0x23, 0xe7, 0x50, 0xe4, 0x22, 0xc2, 0x94,
	0x7a, 0x97, 0xde, 0x4d, 0x65, 0xb0, 0x16, 0xc4, 0x07, 0xb0, 0xdd, 0x01, 0x8e, 0xba, 0x49, 0x4c,
	0xf3, 0xce, 0xda, 0x21, 0xa4, 0x0e, 0x55, 0xf9, 0x26, 0x50, 0xb5, 0xa3, 0x48, 0xa1, 0xd6, 0xb4,
	0xe0, 0x12, 0x19, 0x46, 0x6e, 0xe1, 0xcc, 0x36, 0x3a, 0x32, 0x74, 0x7f, 0x6f, 0xa2, 0x47, 0x2e,
	0x7a, 0xc8, 0x22, 0xd7, 0x70, 0x6a, 0x71, 0xcf, 0xbe, 0xd2, 0x65, 0x31, 0xd2, 0xa2, 0xcb, 0x66,
	0x21, 0x09, 0x80, 0x44, 0xcc, 0xa0, 0x1c, 0xda, 0x2d, 0xfa, 0x89, 0x0a, 0xc7, 0x4c, 0x23, 0x2d,
	0xb9, 0xe8, 0x01, 0xc7, 0xce, 0x21, 0x58, 0x8c, 0xbd, 0x61, 0x5f, 0xe1, 0x8c, 0xcb, 0x44, 0xbb,
	0xa7, 0x68, 0x79, 0x3d, 0xc7, 0x01, 0xcb, 0x6e, 0xb7, 0xfd, 0xf2, 0x19, 0x27, 0xf4, 0x78, 0xbd,
	0xdd, 0x2e, 0x23, 0x0d, 0xa8, 0x6d, 0xf5, 0x53, 0xcc, 0xf8, 0x84, 0x56, 0x5c, 0x6a, 0x8f, 0x92,
	0x1a, 0xe4, 0x4d, 0x4a, 0xc1, 0x79, 0x79, 0x93, 0x92, 0x0b, 0xa8, 0x84, 0x0a, 0x99, 0xc1, 0xa8,
	0x6d, 0xe8, 0x89, 0xc3, 0x7f, 0x80, 0x50, 0x28, 0x3b, 0x21, 0x15, 0xad, 0x3a, 0x6f, 0x23, 0x1f,
	0x1f, 0x3e, 0x97, 0xbe, 0xb7, 0x58, 0xfa, 0xde, 0xf7, 0xd2, 0xf7, 0xde, 0x57, 0x7e, 0x6e, 0xb1,
	0xf2, 0x73, 0x5f, 0x2b, 0x3f, 0xf7, 0xd2, 0xc8, 0xde, 0x49, 0xfa, 0xff, 0x52, 0xcc, 0x7c, 0x8a,
	0xfa, 0xb5, 0xe4, 0x4e, 0xe4, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0x38, 0x27, 0x6c, 0x28, 0x58,
	0x02, 0x00, 0x00,
}

func (m *Landrecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Landrecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Landrecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLandrecord(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintLandrecord(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintLandrecord(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.LandOwnerEmail) > 0 {
		i -= len(m.LandOwnerEmail)
		copy(dAtA[i:], m.LandOwnerEmail)
		i = encodeVarintLandrecord(dAtA, i, uint64(len(m.LandOwnerEmail)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.LandOwnerTel) > 0 {
		i -= len(m.LandOwnerTel)
		copy(dAtA[i:], m.LandOwnerTel)
		i = encodeVarintLandrecord(dAtA, i, uint64(len(m.LandOwnerTel)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.NameOfPreviousOwner) > 0 {
		i -= len(m.NameOfPreviousOwner)
		copy(dAtA[i:], m.NameOfPreviousOwner)
		i = encodeVarintLandrecord(dAtA, i, uint64(len(m.NameOfPreviousOwner)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DateofLandPurchase) > 0 {
		i -= len(m.DateofLandPurchase)
		copy(dAtA[i:], m.DateofLandPurchase)
		i = encodeVarintLandrecord(dAtA, i, uint64(len(m.DateofLandPurchase)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LandOwnerName) > 0 {
		i -= len(m.LandOwnerName)
		copy(dAtA[i:], m.LandOwnerName)
		i = encodeVarintLandrecord(dAtA, i, uint64(len(m.LandOwnerName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LandLocationAddress) > 0 {
		i -= len(m.LandLocationAddress)
		copy(dAtA[i:], m.LandLocationAddress)
		i = encodeVarintLandrecord(dAtA, i, uint64(len(m.LandLocationAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintLandrecord(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LandRegNum) > 0 {
		i -= len(m.LandRegNum)
		copy(dAtA[i:], m.LandRegNum)
		i = encodeVarintLandrecord(dAtA, i, uint64(len(m.LandRegNum)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintLandrecord(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLandrecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovLandrecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Landrecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovLandrecord(uint64(l))
	}
	l = len(m.LandRegNum)
	if l > 0 {
		n += 1 + l + sovLandrecord(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovLandrecord(uint64(l))
	}
	l = len(m.LandLocationAddress)
	if l > 0 {
		n += 1 + l + sovLandrecord(uint64(l))
	}
	l = len(m.LandOwnerName)
	if l > 0 {
		n += 1 + l + sovLandrecord(uint64(l))
	}
	l = len(m.DateofLandPurchase)
	if l > 0 {
		n += 1 + l + sovLandrecord(uint64(l))
	}
	l = len(m.NameOfPreviousOwner)
	if l > 0 {
		n += 1 + l + sovLandrecord(uint64(l))
	}
	l = len(m.LandOwnerTel)
	if l > 0 {
		n += 1 + l + sovLandrecord(uint64(l))
	}
	l = len(m.LandOwnerEmail)
	if l > 0 {
		n += 1 + l + sovLandrecord(uint64(l))
	}
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovLandrecord(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovLandrecord(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLandrecord(uint64(l))
	}
	return n
}

func sovLandrecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLandrecord(x uint64) (n int) {
	return sovLandrecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Landrecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLandrecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Landrecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Landrecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLandrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLandrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LandRegNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLandrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLandrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LandRegNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLandrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLandrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LandLocationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLandrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLandrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LandLocationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LandOwnerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLandrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLandrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LandOwnerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateofLandPurchase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLandrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLandrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateofLandPurchase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameOfPreviousOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLandrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLandrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameOfPreviousOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LandOwnerTel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLandrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLandrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LandOwnerTel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LandOwnerEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLandrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLandrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LandOwnerEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLandrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLandrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLandrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLandrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLandrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLandrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLandrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLandrecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLandrecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLandrecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLandrecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLandrecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLandrecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLandrecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLandrecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLandrecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLandrecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLandrecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLandrecord = fmt.Errorf("proto: unexpected end of group")
)
